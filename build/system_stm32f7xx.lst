ARM GAS  /tmp/ccRVdIIO.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"system_stm32f7xx.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.SystemInit,"ax",%progbits
  19              		.align	1
  20              		.global	SystemInit
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	SystemInit:
  26              	.LFB141:
  27              		.file 1 "Core/Src/system_stm32f7xx.c"
   1:Core/Src/system_stm32f7xx.c **** /**
   2:Core/Src/system_stm32f7xx.c ****   ******************************************************************************
   3:Core/Src/system_stm32f7xx.c ****   * @file    system_stm32f7xx.c
   4:Core/Src/system_stm32f7xx.c ****   * @author  MCD Application Team
   5:Core/Src/system_stm32f7xx.c ****   * @brief   CMSIS Cortex-M7 Device Peripheral Access Layer System Source File.
   6:Core/Src/system_stm32f7xx.c ****   *
   7:Core/Src/system_stm32f7xx.c ****   *   This file provides two functions and one global variable to be called from 
   8:Core/Src/system_stm32f7xx.c ****   *   user application:
   9:Core/Src/system_stm32f7xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  10:Core/Src/system_stm32f7xx.c ****   *                      before branch to main program. This call is made inside
  11:Core/Src/system_stm32f7xx.c ****   *                      the "startup_stm32f7xx.s" file.
  12:Core/Src/system_stm32f7xx.c ****   *
  13:Core/Src/system_stm32f7xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Core/Src/system_stm32f7xx.c ****   *                                  by the user application to setup the SysTick 
  15:Core/Src/system_stm32f7xx.c ****   *                                  timer or configure other parameters.
  16:Core/Src/system_stm32f7xx.c ****   *                                     
  17:Core/Src/system_stm32f7xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Core/Src/system_stm32f7xx.c ****   *                                 be called whenever the core clock is changed
  19:Core/Src/system_stm32f7xx.c ****   *                                 during program execution.
  20:Core/Src/system_stm32f7xx.c ****   *
  21:Core/Src/system_stm32f7xx.c ****   *
  22:Core/Src/system_stm32f7xx.c ****   ******************************************************************************
  23:Core/Src/system_stm32f7xx.c ****   * @attention
  24:Core/Src/system_stm32f7xx.c ****   *
  25:Core/Src/system_stm32f7xx.c ****   * Copyright (c) 2016 STMicroelectronics.
  26:Core/Src/system_stm32f7xx.c ****   * All rights reserved.
  27:Core/Src/system_stm32f7xx.c ****   *
  28:Core/Src/system_stm32f7xx.c ****   * This software is licensed under terms that can be found in the LICENSE file
  29:Core/Src/system_stm32f7xx.c ****   * in the root directory of this software component.
  30:Core/Src/system_stm32f7xx.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  31:Core/Src/system_stm32f7xx.c ****   *
ARM GAS  /tmp/ccRVdIIO.s 			page 2


  32:Core/Src/system_stm32f7xx.c ****   ******************************************************************************
  33:Core/Src/system_stm32f7xx.c ****   */
  34:Core/Src/system_stm32f7xx.c **** 
  35:Core/Src/system_stm32f7xx.c **** /** @addtogroup CMSIS
  36:Core/Src/system_stm32f7xx.c ****   * @{
  37:Core/Src/system_stm32f7xx.c ****   */
  38:Core/Src/system_stm32f7xx.c **** 
  39:Core/Src/system_stm32f7xx.c **** /** @addtogroup stm32f7xx_system
  40:Core/Src/system_stm32f7xx.c ****   * @{
  41:Core/Src/system_stm32f7xx.c ****   */  
  42:Core/Src/system_stm32f7xx.c ****   
  43:Core/Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Includes
  44:Core/Src/system_stm32f7xx.c ****   * @{
  45:Core/Src/system_stm32f7xx.c ****   */
  46:Core/Src/system_stm32f7xx.c **** 
  47:Core/Src/system_stm32f7xx.c **** #include "stm32f7xx.h"
  48:Core/Src/system_stm32f7xx.c **** 
  49:Core/Src/system_stm32f7xx.c **** #if !defined  (HSE_VALUE) 
  50:Core/Src/system_stm32f7xx.c ****   #define HSE_VALUE    ((uint32_t)25000000) /*!< Default value of the External oscillator in Hz */
  51:Core/Src/system_stm32f7xx.c **** #endif /* HSE_VALUE */
  52:Core/Src/system_stm32f7xx.c **** 
  53:Core/Src/system_stm32f7xx.c **** #if !defined  (HSI_VALUE)
  54:Core/Src/system_stm32f7xx.c ****   #define HSI_VALUE    ((uint32_t)16000000) /*!< Value of the Internal oscillator in Hz*/
  55:Core/Src/system_stm32f7xx.c **** #endif /* HSI_VALUE */
  56:Core/Src/system_stm32f7xx.c **** 
  57:Core/Src/system_stm32f7xx.c **** /**
  58:Core/Src/system_stm32f7xx.c ****   * @}
  59:Core/Src/system_stm32f7xx.c ****   */
  60:Core/Src/system_stm32f7xx.c **** 
  61:Core/Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_TypesDefinitions
  62:Core/Src/system_stm32f7xx.c ****   * @{
  63:Core/Src/system_stm32f7xx.c ****   */
  64:Core/Src/system_stm32f7xx.c **** 
  65:Core/Src/system_stm32f7xx.c **** /**
  66:Core/Src/system_stm32f7xx.c ****   * @}
  67:Core/Src/system_stm32f7xx.c ****   */
  68:Core/Src/system_stm32f7xx.c **** 
  69:Core/Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Defines
  70:Core/Src/system_stm32f7xx.c ****   * @{
  71:Core/Src/system_stm32f7xx.c ****   */
  72:Core/Src/system_stm32f7xx.c **** 
  73:Core/Src/system_stm32f7xx.c **** /************************* Miscellaneous Configuration ************************/
  74:Core/Src/system_stm32f7xx.c **** 
  75:Core/Src/system_stm32f7xx.c **** /* Note: Following vector table addresses must be defined in line with linker
  76:Core/Src/system_stm32f7xx.c ****          configuration. */
  77:Core/Src/system_stm32f7xx.c **** /*!< Uncomment the following line if you need to relocate the vector table
  78:Core/Src/system_stm32f7xx.c ****      anywhere in Flash or Sram, else the vector table is kept at the automatic
  79:Core/Src/system_stm32f7xx.c ****      remap of boot address selected */
  80:Core/Src/system_stm32f7xx.c **** /* #define USER_VECT_TAB_ADDRESS */
  81:Core/Src/system_stm32f7xx.c **** 
  82:Core/Src/system_stm32f7xx.c **** #if defined(USER_VECT_TAB_ADDRESS)
  83:Core/Src/system_stm32f7xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table
  84:Core/Src/system_stm32f7xx.c ****      in Sram else user remap will be done in Flash. */
  85:Core/Src/system_stm32f7xx.c **** /* #define VECT_TAB_SRAM */
  86:Core/Src/system_stm32f7xx.c **** #if defined(VECT_TAB_SRAM)
  87:Core/Src/system_stm32f7xx.c **** #define VECT_TAB_BASE_ADDRESS   RAMDTCM_BASE    /*!< Vector Table base address field.
  88:Core/Src/system_stm32f7xx.c ****                                                      This value must be a multiple of 0x200. */
ARM GAS  /tmp/ccRVdIIO.s 			page 3


  89:Core/Src/system_stm32f7xx.c **** #else
  90:Core/Src/system_stm32f7xx.c **** #define VECT_TAB_BASE_ADDRESS   FLASH_BASE      /*!< Vector Table base address field.
  91:Core/Src/system_stm32f7xx.c ****                                                      This value must be a multiple of 0x200. */
  92:Core/Src/system_stm32f7xx.c **** #endif /* VECT_TAB_SRAM */
  93:Core/Src/system_stm32f7xx.c **** #if !defined(VECT_TAB_OFFSET)
  94:Core/Src/system_stm32f7xx.c **** #define VECT_TAB_OFFSET         0x00000000U     /*!< Vector Table offset field.
  95:Core/Src/system_stm32f7xx.c ****                                                      This value must be a multiple of 0x200. */
  96:Core/Src/system_stm32f7xx.c **** #endif /* VECT_TAB_OFFSET */
  97:Core/Src/system_stm32f7xx.c **** #endif /* USER_VECT_TAB_ADDRESS */
  98:Core/Src/system_stm32f7xx.c **** /******************************************************************************/
  99:Core/Src/system_stm32f7xx.c **** 
 100:Core/Src/system_stm32f7xx.c **** /**
 101:Core/Src/system_stm32f7xx.c ****   * @}
 102:Core/Src/system_stm32f7xx.c ****   */
 103:Core/Src/system_stm32f7xx.c **** 
 104:Core/Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Macros
 105:Core/Src/system_stm32f7xx.c ****   * @{
 106:Core/Src/system_stm32f7xx.c ****   */
 107:Core/Src/system_stm32f7xx.c **** 
 108:Core/Src/system_stm32f7xx.c **** /**
 109:Core/Src/system_stm32f7xx.c ****   * @}
 110:Core/Src/system_stm32f7xx.c ****   */
 111:Core/Src/system_stm32f7xx.c **** 
 112:Core/Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Variables
 113:Core/Src/system_stm32f7xx.c ****   * @{
 114:Core/Src/system_stm32f7xx.c ****   */
 115:Core/Src/system_stm32f7xx.c **** 
 116:Core/Src/system_stm32f7xx.c ****   /* This variable is updated in three ways:
 117:Core/Src/system_stm32f7xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 118:Core/Src/system_stm32f7xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 119:Core/Src/system_stm32f7xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency 
 120:Core/Src/system_stm32f7xx.c ****          Note: If you use this function to configure the system clock; then there
 121:Core/Src/system_stm32f7xx.c ****                is no need to call the 2 first functions listed above, since SystemCoreClock
 122:Core/Src/system_stm32f7xx.c ****                variable is updated automatically.
 123:Core/Src/system_stm32f7xx.c ****   */
 124:Core/Src/system_stm32f7xx.c ****   uint32_t SystemCoreClock = 16000000;
 125:Core/Src/system_stm32f7xx.c ****   const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 126:Core/Src/system_stm32f7xx.c ****   const uint8_t APBPrescTable[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 127:Core/Src/system_stm32f7xx.c **** 
 128:Core/Src/system_stm32f7xx.c **** /**
 129:Core/Src/system_stm32f7xx.c ****   * @}
 130:Core/Src/system_stm32f7xx.c ****   */
 131:Core/Src/system_stm32f7xx.c **** 
 132:Core/Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_FunctionPrototypes
 133:Core/Src/system_stm32f7xx.c ****   * @{
 134:Core/Src/system_stm32f7xx.c ****   */
 135:Core/Src/system_stm32f7xx.c **** 
 136:Core/Src/system_stm32f7xx.c **** /**
 137:Core/Src/system_stm32f7xx.c ****   * @}
 138:Core/Src/system_stm32f7xx.c ****   */
 139:Core/Src/system_stm32f7xx.c **** 
 140:Core/Src/system_stm32f7xx.c **** /** @addtogroup STM32F7xx_System_Private_Functions
 141:Core/Src/system_stm32f7xx.c ****   * @{
 142:Core/Src/system_stm32f7xx.c ****   */
 143:Core/Src/system_stm32f7xx.c **** 
 144:Core/Src/system_stm32f7xx.c **** /**
 145:Core/Src/system_stm32f7xx.c ****   * @brief  Setup the microcontroller system
ARM GAS  /tmp/ccRVdIIO.s 			page 4


 146:Core/Src/system_stm32f7xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 147:Core/Src/system_stm32f7xx.c ****   *         SystemFrequency variable.
 148:Core/Src/system_stm32f7xx.c ****   * @param  None
 149:Core/Src/system_stm32f7xx.c ****   * @retval None
 150:Core/Src/system_stm32f7xx.c ****   */
 151:Core/Src/system_stm32f7xx.c **** void SystemInit(void)
 152:Core/Src/system_stm32f7xx.c **** {
  28              		.loc 1 152 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 153:Core/Src/system_stm32f7xx.c ****   /* FPU settings ------------------------------------------------------------*/
 154:Core/Src/system_stm32f7xx.c **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 155:Core/Src/system_stm32f7xx.c ****   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  33              		.loc 1 155 3 view .LVU1
  34              		.loc 1 155 14 is_stmt 0 view .LVU2
  35 0000 034A     		ldr	r2, .L2
  36 0002 D2F88830 		ldr	r3, [r2, #136]
  37 0006 43F47003 		orr	r3, r3, #15728640
  38 000a C2F88830 		str	r3, [r2, #136]
 156:Core/Src/system_stm32f7xx.c **** #endif
 157:Core/Src/system_stm32f7xx.c **** 
 158:Core/Src/system_stm32f7xx.c ****   /* Configure the Vector Table location -------------------------------------*/
 159:Core/Src/system_stm32f7xx.c **** #if defined(USER_VECT_TAB_ADDRESS)
 160:Core/Src/system_stm32f7xx.c ****   SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM 
 161:Core/Src/system_stm32f7xx.c **** #endif /* USER_VECT_TAB_ADDRESS */
 162:Core/Src/system_stm32f7xx.c **** }
  39              		.loc 1 162 1 view .LVU3
  40 000e 7047     		bx	lr
  41              	.L3:
  42              		.align	2
  43              	.L2:
  44 0010 00ED00E0 		.word	-536810240
  45              		.cfi_endproc
  46              	.LFE141:
  48              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  49              		.align	1
  50              		.global	SystemCoreClockUpdate
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  55              	SystemCoreClockUpdate:
  56              	.LFB142:
 163:Core/Src/system_stm32f7xx.c **** 
 164:Core/Src/system_stm32f7xx.c **** /**
 165:Core/Src/system_stm32f7xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 166:Core/Src/system_stm32f7xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 167:Core/Src/system_stm32f7xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 168:Core/Src/system_stm32f7xx.c ****   *         other parameters.
 169:Core/Src/system_stm32f7xx.c ****   *           
 170:Core/Src/system_stm32f7xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 171:Core/Src/system_stm32f7xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 172:Core/Src/system_stm32f7xx.c ****   *         based on this variable will be incorrect.         
 173:Core/Src/system_stm32f7xx.c ****   *     
 174:Core/Src/system_stm32f7xx.c ****   * @note   - The system frequency computed by this function is not the real 
 175:Core/Src/system_stm32f7xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
ARM GAS  /tmp/ccRVdIIO.s 			page 5


 176:Core/Src/system_stm32f7xx.c ****   *           constant and the selected clock source:
 177:Core/Src/system_stm32f7xx.c ****   *             
 178:Core/Src/system_stm32f7xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 179:Core/Src/system_stm32f7xx.c ****   *                                              
 180:Core/Src/system_stm32f7xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 181:Core/Src/system_stm32f7xx.c ****   *                          
 182:Core/Src/system_stm32f7xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 183:Core/Src/system_stm32f7xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 184:Core/Src/system_stm32f7xx.c ****   *         
 185:Core/Src/system_stm32f7xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f7xx_hal_conf.h file (default value
 186:Core/Src/system_stm32f7xx.c ****   *             16 MHz) but the real value may vary depending on the variations
 187:Core/Src/system_stm32f7xx.c ****   *             in voltage and temperature.   
 188:Core/Src/system_stm32f7xx.c ****   *    
 189:Core/Src/system_stm32f7xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f7xx_hal_conf.h file (default value
 190:Core/Src/system_stm32f7xx.c ****   *              25 MHz), user has to ensure that HSE_VALUE is same as the real
 191:Core/Src/system_stm32f7xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 192:Core/Src/system_stm32f7xx.c ****   *              have wrong result.
 193:Core/Src/system_stm32f7xx.c ****   *                
 194:Core/Src/system_stm32f7xx.c ****   *         - The result of this function could be not correct when using fractional
 195:Core/Src/system_stm32f7xx.c ****   *           value for HSE crystal.
 196:Core/Src/system_stm32f7xx.c ****   *     
 197:Core/Src/system_stm32f7xx.c ****   * @param  None
 198:Core/Src/system_stm32f7xx.c ****   * @retval None
 199:Core/Src/system_stm32f7xx.c ****   */
 200:Core/Src/system_stm32f7xx.c **** void SystemCoreClockUpdate(void)
 201:Core/Src/system_stm32f7xx.c **** {
  57              		.loc 1 201 1 is_stmt 1 view -0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
 202:Core/Src/system_stm32f7xx.c ****   uint32_t tmp, pllvco, pllp, pllsource, pllm;
  62              		.loc 1 202 3 view .LVU5
 203:Core/Src/system_stm32f7xx.c ****   
 204:Core/Src/system_stm32f7xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 205:Core/Src/system_stm32f7xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
  63              		.loc 1 205 3 view .LVU6
  64              		.loc 1 205 12 is_stmt 0 view .LVU7
  65 0000 224B     		ldr	r3, .L12
  66 0002 9B68     		ldr	r3, [r3, #8]
  67              		.loc 1 205 7 view .LVU8
  68 0004 03F00C03 		and	r3, r3, #12
  69              	.LVL0:
 206:Core/Src/system_stm32f7xx.c **** 
 207:Core/Src/system_stm32f7xx.c ****   switch (tmp)
  70              		.loc 1 207 3 is_stmt 1 view .LVU9
  71 0008 042B     		cmp	r3, #4
  72 000a 14D0     		beq	.L5
  73 000c 082B     		cmp	r3, #8
  74 000e 16D0     		beq	.L6
  75 0010 1BB1     		cbz	r3, .L11
 208:Core/Src/system_stm32f7xx.c ****   {
 209:Core/Src/system_stm32f7xx.c ****     case 0x00:  /* HSI used as system clock source */
 210:Core/Src/system_stm32f7xx.c ****       SystemCoreClock = HSI_VALUE;
 211:Core/Src/system_stm32f7xx.c ****       break;
 212:Core/Src/system_stm32f7xx.c ****     case 0x04:  /* HSE used as system clock source */
 213:Core/Src/system_stm32f7xx.c ****       SystemCoreClock = HSE_VALUE;
ARM GAS  /tmp/ccRVdIIO.s 			page 6


 214:Core/Src/system_stm32f7xx.c ****       break;
 215:Core/Src/system_stm32f7xx.c ****     case 0x08:  /* PLL used as system clock source */
 216:Core/Src/system_stm32f7xx.c **** 
 217:Core/Src/system_stm32f7xx.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
 218:Core/Src/system_stm32f7xx.c ****          SYSCLK = PLL_VCO / PLL_P
 219:Core/Src/system_stm32f7xx.c ****          */    
 220:Core/Src/system_stm32f7xx.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 221:Core/Src/system_stm32f7xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 222:Core/Src/system_stm32f7xx.c ****       
 223:Core/Src/system_stm32f7xx.c ****       if (pllsource != 0)
 224:Core/Src/system_stm32f7xx.c ****       {
 225:Core/Src/system_stm32f7xx.c ****         /* HSE used as PLL clock source */
 226:Core/Src/system_stm32f7xx.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 227:Core/Src/system_stm32f7xx.c ****       }
 228:Core/Src/system_stm32f7xx.c ****       else
 229:Core/Src/system_stm32f7xx.c ****       {
 230:Core/Src/system_stm32f7xx.c ****         /* HSI used as PLL clock source */
 231:Core/Src/system_stm32f7xx.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 232:Core/Src/system_stm32f7xx.c ****       }
 233:Core/Src/system_stm32f7xx.c **** 
 234:Core/Src/system_stm32f7xx.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 235:Core/Src/system_stm32f7xx.c ****       SystemCoreClock = pllvco/pllp;
 236:Core/Src/system_stm32f7xx.c ****       break;
 237:Core/Src/system_stm32f7xx.c ****     default:
 238:Core/Src/system_stm32f7xx.c ****       SystemCoreClock = HSI_VALUE;
  76              		.loc 1 238 7 view .LVU10
  77              		.loc 1 238 23 is_stmt 0 view .LVU11
  78 0012 1F4B     		ldr	r3, .L12+4
  79              	.LVL1:
  80              		.loc 1 238 23 view .LVU12
  81 0014 1F4A     		ldr	r2, .L12+8
  82 0016 1A60     		str	r2, [r3]
 239:Core/Src/system_stm32f7xx.c ****       break;
  83              		.loc 1 239 7 is_stmt 1 view .LVU13
  84 0018 02E0     		b	.L8
  85              	.LVL2:
  86              	.L11:
 210:Core/Src/system_stm32f7xx.c ****       break;
  87              		.loc 1 210 7 view .LVU14
 210:Core/Src/system_stm32f7xx.c ****       break;
  88              		.loc 1 210 23 is_stmt 0 view .LVU15
  89 001a 1D4B     		ldr	r3, .L12+4
  90              	.LVL3:
 210:Core/Src/system_stm32f7xx.c ****       break;
  91              		.loc 1 210 23 view .LVU16
  92 001c 1D4A     		ldr	r2, .L12+8
  93 001e 1A60     		str	r2, [r3]
 211:Core/Src/system_stm32f7xx.c ****     case 0x04:  /* HSE used as system clock source */
  94              		.loc 1 211 7 is_stmt 1 view .LVU17
  95              	.L8:
 240:Core/Src/system_stm32f7xx.c ****   }
 241:Core/Src/system_stm32f7xx.c ****   /* Compute HCLK frequency --------------------------------------------------*/
 242:Core/Src/system_stm32f7xx.c ****   /* Get HCLK prescaler */
 243:Core/Src/system_stm32f7xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
  96              		.loc 1 243 3 view .LVU18
  97              		.loc 1 243 28 is_stmt 0 view .LVU19
  98 0020 1A4B     		ldr	r3, .L12
ARM GAS  /tmp/ccRVdIIO.s 			page 7


  99 0022 9B68     		ldr	r3, [r3, #8]
 100              		.loc 1 243 52 view .LVU20
 101 0024 C3F30313 		ubfx	r3, r3, #4, #4
 102              		.loc 1 243 22 view .LVU21
 103 0028 1B4A     		ldr	r2, .L12+12
 104 002a D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 105              	.LVL4:
 244:Core/Src/system_stm32f7xx.c ****   /* HCLK frequency */
 245:Core/Src/system_stm32f7xx.c ****   SystemCoreClock >>= tmp;
 106              		.loc 1 245 3 is_stmt 1 view .LVU22
 107              		.loc 1 245 19 is_stmt 0 view .LVU23
 108 002c 184A     		ldr	r2, .L12+4
 109 002e 1368     		ldr	r3, [r2]
 110 0030 CB40     		lsrs	r3, r3, r1
 111 0032 1360     		str	r3, [r2]
 246:Core/Src/system_stm32f7xx.c **** }
 112              		.loc 1 246 1 view .LVU24
 113 0034 7047     		bx	lr
 114              	.LVL5:
 115              	.L5:
 213:Core/Src/system_stm32f7xx.c ****       break;
 116              		.loc 1 213 7 is_stmt 1 view .LVU25
 213:Core/Src/system_stm32f7xx.c ****       break;
 117              		.loc 1 213 23 is_stmt 0 view .LVU26
 118 0036 164B     		ldr	r3, .L12+4
 119              	.LVL6:
 213:Core/Src/system_stm32f7xx.c ****       break;
 120              		.loc 1 213 23 view .LVU27
 121 0038 184A     		ldr	r2, .L12+16
 122 003a 1A60     		str	r2, [r3]
 214:Core/Src/system_stm32f7xx.c ****     case 0x08:  /* PLL used as system clock source */
 123              		.loc 1 214 7 is_stmt 1 view .LVU28
 124 003c F0E7     		b	.L8
 125              	.LVL7:
 126              	.L6:
 220:Core/Src/system_stm32f7xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 127              		.loc 1 220 7 view .LVU29
 220:Core/Src/system_stm32f7xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 128              		.loc 1 220 23 is_stmt 0 view .LVU30
 129 003e 134B     		ldr	r3, .L12
 130              	.LVL8:
 220:Core/Src/system_stm32f7xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 131              		.loc 1 220 23 view .LVU31
 132 0040 5968     		ldr	r1, [r3, #4]
 133              	.LVL9:
 221:Core/Src/system_stm32f7xx.c ****       
 134              		.loc 1 221 7 is_stmt 1 view .LVU32
 221:Core/Src/system_stm32f7xx.c ****       
 135              		.loc 1 221 17 is_stmt 0 view .LVU33
 136 0042 5A68     		ldr	r2, [r3, #4]
 221:Core/Src/system_stm32f7xx.c ****       
 137              		.loc 1 221 12 view .LVU34
 138 0044 02F03F02 		and	r2, r2, #63
 139              	.LVL10:
 223:Core/Src/system_stm32f7xx.c ****       {
 140              		.loc 1 223 7 is_stmt 1 view .LVU35
 223:Core/Src/system_stm32f7xx.c ****       {
ARM GAS  /tmp/ccRVdIIO.s 			page 8


 141              		.loc 1 223 10 is_stmt 0 view .LVU36
 142 0048 11F4800F 		tst	r1, #4194304
 143 004c 13D0     		beq	.L9
 226:Core/Src/system_stm32f7xx.c ****       }
 144              		.loc 1 226 9 is_stmt 1 view .LVU37
 226:Core/Src/system_stm32f7xx.c ****       }
 145              		.loc 1 226 29 is_stmt 0 view .LVU38
 146 004e 134B     		ldr	r3, .L12+16
 147 0050 B3FBF2F3 		udiv	r3, r3, r2
 226:Core/Src/system_stm32f7xx.c ****       }
 148              		.loc 1 226 44 view .LVU39
 149 0054 0D4A     		ldr	r2, .L12
 150              	.LVL11:
 226:Core/Src/system_stm32f7xx.c ****       }
 151              		.loc 1 226 44 view .LVU40
 152 0056 5268     		ldr	r2, [r2, #4]
 226:Core/Src/system_stm32f7xx.c ****       }
 153              		.loc 1 226 74 view .LVU41
 154 0058 C2F38812 		ubfx	r2, r2, #6, #9
 226:Core/Src/system_stm32f7xx.c ****       }
 155              		.loc 1 226 16 view .LVU42
 156 005c 02FB03F3 		mul	r3, r2, r3
 157              	.LVL12:
 158              	.L10:
 234:Core/Src/system_stm32f7xx.c ****       SystemCoreClock = pllvco/pllp;
 159              		.loc 1 234 7 is_stmt 1 view .LVU43
 234:Core/Src/system_stm32f7xx.c ****       SystemCoreClock = pllvco/pllp;
 160              		.loc 1 234 20 is_stmt 0 view .LVU44
 161 0060 0A4A     		ldr	r2, .L12
 162 0062 5268     		ldr	r2, [r2, #4]
 234:Core/Src/system_stm32f7xx.c ****       SystemCoreClock = pllvco/pllp;
 163              		.loc 1 234 50 view .LVU45
 164 0064 C2F30142 		ubfx	r2, r2, #16, #2
 234:Core/Src/system_stm32f7xx.c ****       SystemCoreClock = pllvco/pllp;
 165              		.loc 1 234 56 view .LVU46
 166 0068 0132     		adds	r2, r2, #1
 234:Core/Src/system_stm32f7xx.c ****       SystemCoreClock = pllvco/pllp;
 167              		.loc 1 234 12 view .LVU47
 168 006a 5200     		lsls	r2, r2, #1
 169              	.LVL13:
 235:Core/Src/system_stm32f7xx.c ****       break;
 170              		.loc 1 235 7 is_stmt 1 view .LVU48
 235:Core/Src/system_stm32f7xx.c ****       break;
 171              		.loc 1 235 31 is_stmt 0 view .LVU49
 172 006c B3FBF2F3 		udiv	r3, r3, r2
 173              	.LVL14:
 235:Core/Src/system_stm32f7xx.c ****       break;
 174              		.loc 1 235 23 view .LVU50
 175 0070 074A     		ldr	r2, .L12+4
 176              	.LVL15:
 235:Core/Src/system_stm32f7xx.c ****       break;
 177              		.loc 1 235 23 view .LVU51
 178 0072 1360     		str	r3, [r2]
 236:Core/Src/system_stm32f7xx.c ****     default:
 179              		.loc 1 236 7 is_stmt 1 view .LVU52
 180 0074 D4E7     		b	.L8
 181              	.LVL16:
ARM GAS  /tmp/ccRVdIIO.s 			page 9


 182              	.L9:
 231:Core/Src/system_stm32f7xx.c ****       }
 183              		.loc 1 231 9 view .LVU53
 231:Core/Src/system_stm32f7xx.c ****       }
 184              		.loc 1 231 29 is_stmt 0 view .LVU54
 185 0076 074B     		ldr	r3, .L12+8
 186 0078 B3FBF2F3 		udiv	r3, r3, r2
 231:Core/Src/system_stm32f7xx.c ****       }
 187              		.loc 1 231 44 view .LVU55
 188 007c 034A     		ldr	r2, .L12
 189              	.LVL17:
 231:Core/Src/system_stm32f7xx.c ****       }
 190              		.loc 1 231 44 view .LVU56
 191 007e 5268     		ldr	r2, [r2, #4]
 231:Core/Src/system_stm32f7xx.c ****       }
 192              		.loc 1 231 74 view .LVU57
 193 0080 C2F38812 		ubfx	r2, r2, #6, #9
 231:Core/Src/system_stm32f7xx.c ****       }
 194              		.loc 1 231 16 view .LVU58
 195 0084 02FB03F3 		mul	r3, r2, r3
 196              	.LVL18:
 231:Core/Src/system_stm32f7xx.c ****       }
 197              		.loc 1 231 16 view .LVU59
 198 0088 EAE7     		b	.L10
 199              	.L13:
 200 008a 00BF     		.align	2
 201              	.L12:
 202 008c 00380240 		.word	1073887232
 203 0090 00000000 		.word	.LANCHOR0
 204 0094 0024F400 		.word	16000000
 205 0098 00000000 		.word	.LANCHOR1
 206 009c 40787D01 		.word	25000000
 207              		.cfi_endproc
 208              	.LFE142:
 210              		.global	APBPrescTable
 211              		.global	AHBPrescTable
 212              		.global	SystemCoreClock
 213              		.section	.data.SystemCoreClock,"aw"
 214              		.align	2
 215              		.set	.LANCHOR0,. + 0
 218              	SystemCoreClock:
 219 0000 0024F400 		.word	16000000
 220              		.section	.rodata.AHBPrescTable,"a"
 221              		.align	2
 222              		.set	.LANCHOR1,. + 0
 225              	AHBPrescTable:
 226 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\001\002\003\004\006"
 226      00000000 
 226      01020304 
 226      06
 227 000d 070809   		.ascii	"\007\010\011"
 228              		.section	.rodata.APBPrescTable,"a"
 229              		.align	2
 232              	APBPrescTable:
 233 0000 00000000 		.ascii	"\000\000\000\000\001\002\003\004"
 233      01020304 
 234              		.text
ARM GAS  /tmp/ccRVdIIO.s 			page 10


 235              	.Letext0:
 236              		.file 2 "/home/borkstar/toolchains/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux/gcc-arm-none-eabi-1
 237              		.file 3 "/home/borkstar/toolchains/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux/gcc-arm-none-eabi-1
 238              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 239              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 240              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
ARM GAS  /tmp/ccRVdIIO.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f7xx.c
     /tmp/ccRVdIIO.s:19     .text.SystemInit:0000000000000000 $t
     /tmp/ccRVdIIO.s:25     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccRVdIIO.s:44     .text.SystemInit:0000000000000010 $d
     /tmp/ccRVdIIO.s:49     .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccRVdIIO.s:55     .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccRVdIIO.s:202    .text.SystemCoreClockUpdate:000000000000008c $d
     /tmp/ccRVdIIO.s:232    .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/ccRVdIIO.s:225    .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccRVdIIO.s:218    .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccRVdIIO.s:214    .data.SystemCoreClock:0000000000000000 $d
     /tmp/ccRVdIIO.s:221    .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/ccRVdIIO.s:229    .rodata.APBPrescTable:0000000000000000 $d

NO UNDEFINED SYMBOLS
